{"componentChunkName":"component---src-templates-blog-post-js","path":"/creating-cck-field-module-invisible-widget/","result":{"data":{"site":{"siteMetadata":{"author":"Luu Tuan Anh","homeCity":"Hanoi, Vietnam"}},"markdownRemark":{"html":"<p>Most CCK Field modules have a widget where the user adds information upon creating a node which is then saved with the node. For the recent <a href=\"http://drupal.org/project/etherpad\">Etherpad module</a> I wrote, I needed an “invisible” widget which saved with each new node some information from the field definition as well as autogenerated information. As I didn’t any documentation on how to do this, I thought I’d document it here quickly.</p>\n<p>The first thing you do is define your database columns for your field in hook<em>field</em>settings.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">etherpad_field_settings</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$op</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$field</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$op</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Code removed.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token single-quoted-string string\">'database columns'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n        <span class=\"token single-quoted-string string\">'etherpad_url'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'varchar'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'length'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'not null'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">FALSE</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'etherpad_text'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'not null'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">TRUE</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'size'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'big'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'attributes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'size'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'medium'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'not null'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">FALSE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter important\">?></span></span></code></pre></div>\n<p>Next, you define your widget form inside hook<em>widget. Some tutorials I saw suggest you define your widget form in hook</em>elements/hook<em>process. I did that at first but decided against it as a) I never got it to work and b) it just adds needless complexity. Generally you’ll just want to define your widget in hook</em>widgets.</p>\n<p>Two really important things here to get your “invisible” widget to work correctly. First, you <strong>must</strong> name your form keys the same as you named your database column names in hook<em>field</em>settings. This tripped me up for a long time. CCK saves data by magic (you never explicitly save anything from a widget) and this is the key to getting the incantation to take. Second, using the ”<a href=\"http://api.drupal.org/api/drupal/developer--topics--forms_api_reference.html/6#val\">value” field type</a> was the key to creating an “invisible” field and getting my data saved correctly.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">/**\n * Implementation of hook_widget().\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">etherpad_widget</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$form</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$form_state</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$field</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$items</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$delta</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$element</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'etherpad_url'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'#type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'#value'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$items</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$delta</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'etherpad_url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$form</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'nid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'#value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$items</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$delta</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'etherpad_url'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token variable\">$field</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'etherpad_url'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">etherpad_generate_padid</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$field</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'etherpad_url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$element</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'etherpad_text'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'#type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'#value'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$items</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$delta</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'etherpad_text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$form</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'nid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'#value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$items</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$delta</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'etherpad_text'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token double-quoted-string string\">\"default value for now until we have a function to generate one\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$element</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'attributes'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'#type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'#value'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$items</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$delta</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'attributes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$form</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'nid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'#value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$items</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$delta</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'attributes'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$field</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'attributes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Used so that hook_field('validate') knows where to</span>\n  <span class=\"token comment\">// flag an error in deeply nested forms.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$form</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'#parents'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$form</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'#parents'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token variable\">$element</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'_error_element'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'#type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'#value'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">']['</span><span class=\"token punctuation\">,</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$form</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'#parents'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter important\">?></span></span></code></pre></div>\n<p>And that’s it! Read this and you’ll save yourself hours of frustration :)</p>\n<p>One other note, the Devel module’s “reinstall module” function is very useful as you’ll be reinstalling the module often to reset the database w/ your changes. Enable the Devel block to access it.</p>\n<p>This documentation doesn’t cover most of what you’ll need to know to write a CCK module. I relied heavily on the following tutorials.</p>\n<ul>\n<li><a href=\"http://maxeydevbox.org/blogs/geoffmaxey/building-custom-compound-fieldswidgets-cck-drupal-6x\">http://maxeydevbox.org/blogs/geoffmaxey/building-custom-compound-fieldswidgets-cck-drupal-6x</a></li>\n<li><a href=\"http://www.lullabot.com/articles/creating-custom-cck-fields\">http://www.lullabot.com/articles/creating-custom-cck-fields</a></li>\n<li><a href=\"http://www.poplarware.com/articles/cck_field_module\">http://www.poplarware.com/articles/cck<em>field</em>module</a></li>\n</ul>","excerpt":"Most CCK Field modules have a widget where the user adds information upon creating a node which is then saved with the node. For the recent…","fields":{"tagSlugs":["/tags/drupal/","/tags/etherpad/"]},"frontmatter":{"title":"Creating a CCK Field module with an \"invisible\" widget","tags":["drupal","etherpad"],"date":"November 19, 2010"}}},"pageContext":{"slug":"/creating-cck-field-module-invisible-widget/"}}}